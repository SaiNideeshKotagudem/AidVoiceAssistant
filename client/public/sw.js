const CACHE_NAME = 'aidvoice-v1';
const STATIC_CACHE = 'aidvoice-static-v1';
const DYNAMIC_CACHE = 'aidvoice-dynamic-v1';

// Assets to cache immediately
const STATIC_ASSETS = [
  '/',
  '/guide',
  '/translate',
  '/settings',
  '/manifest.json',
  '/favicon.svg',
  // Add critical CSS and JS files that will be generated by Vite
];

// Assets to cache on first access
const CACHEABLE_PATHS = [
  '/api/emergency-protocols',
  '/api/emergency-contacts',
];

// Install event - cache static assets
self.addEventListener('install', (event) => {
  console.log('Service Worker installing...');
  
  event.waitUntil(
    caches.open(STATIC_CACHE)
      .then((cache) => {
        console.log('Caching static assets...');
        return cache.addAll(STATIC_ASSETS.filter(url => {
          // Only cache assets that actually exist
          return !url.includes('undefined');
        }));
      })
      .catch((error) => {
        console.error('Failed to cache static assets:', error);
      })
  );
  
  // Force activation of new service worker
  self.skipWaiting();
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  console.log('Service Worker activating...');
  
  event.waitUntil(
    caches.keys()
      .then((cacheNames) => {
        return Promise.all(
          cacheNames.map((cacheName) => {
            if (cacheName !== STATIC_CACHE && cacheName !== DYNAMIC_CACHE) {
              console.log('Deleting old cache:', cacheName);
              return caches.delete(cacheName);
            }
          })
        );
      })
      .then(() => {
        // Take control of all pages immediately
        return self.clients.claim();
      })
  );
});

// Fetch event - serve from cache or network
self.addEventListener('fetch', (event) => {
  const { request } = event;
  const url = new URL(request.url);
  
  // Handle different types of requests
  if (request.method !== 'GET') {
    // For non-GET requests, try network first, then show offline message
    event.respondWith(handleNonGetRequest(request));
    return;
  }
  
  // For GET requests, use appropriate caching strategy
  if (isStaticAsset(url)) {
    // Static assets: Cache first, then network
    event.respondWith(handleStaticAsset(request));
  } else if (isAPIRequest(url)) {
    // API requests: Network first, then cache
    event.respondWith(handleAPIRequest(request));
  } else {
    // Pages: Network first, then cache, then offline fallback
    event.respondWith(handlePageRequest(request));
  }
});

// Handle static assets (CSS, JS, images, fonts)
async function handleStaticAsset(request) {
  try {
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      const cache = await caches.open(STATIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.error('Static asset fetch failed:', error);
    // Return a fallback response for critical assets
    return new Response('Asset unavailable offline', { status: 503 });
  }
}

// Handle API requests
async function handleAPIRequest(request) {
  try {
    // Try network first
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      // Cache successful responses
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('Network failed, trying cache for:', request.url);
    
    // Fallback to cache
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // Return offline fallback for API requests
    return createOfflineAPIResponse(request);
  }
}

// Handle page requests
async function handlePageRequest(request) {
  try {
    // Try network first
    const networkResponse = await fetch(request);
    if (networkResponse.ok) {
      // Cache successful page responses
      const cache = await caches.open(DYNAMIC_CACHE);
      cache.put(request, networkResponse.clone());
    }
    return networkResponse;
  } catch (error) {
    console.log('Network failed, trying cache for:', request.url);
    
    // Fallback to cache
    const cachedResponse = await caches.match(request);
    if (cachedResponse) {
      return cachedResponse;
    }
    
    // Ultimate fallback to main app shell
    const appShell = await caches.match('/');
    if (appShell) {
      return appShell;
    }
    
    // Final fallback
    return createOfflinePageResponse();
  }
}

// Handle non-GET requests (POST, PUT, DELETE, etc.)
async function handleNonGetRequest(request) {
  try {
    return await fetch(request);
  } catch (error) {
    console.error('Non-GET request failed:', error);
    
    // Store failed requests for later sync
    if (request.url.includes('/api/')) {
      await storeFailedRequest(request);
    }
    
    return new Response(
      JSON.stringify({ 
        error: 'Request failed - will retry when online',
        offline: true 
      }),
      { 
        status: 503,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
}

// Utility functions
function isStaticAsset(url) {
  const staticExtensions = ['.js', '.css', '.png', '.jpg', '.jpeg', '.gif', '.svg', '.woff', '.woff2', '.ttf'];
  return staticExtensions.some(ext => url.pathname.endsWith(ext)) || 
         url.pathname.includes('/assets/') ||
         url.pathname.includes('/static/');
}

function isAPIRequest(url) {
  return url.pathname.startsWith('/api/');
}

function createOfflineAPIResponse(request) {
  const url = new URL(request.url);
  
  // Provide meaningful offline responses for different API endpoints
  if (url.pathname.includes('/emergency-protocols')) {
    return new Response(
      JSON.stringify([
        {
          id: 1,
          type: 'fire',
          name: 'Fire Emergency (Offline)',
          description: 'Basic fire emergency protocol',
          instructions: {
            steps: [
              'Stay low and exit immediately',
              'Call emergency services',
              'Go to meeting point'
            ]
          },
          severity: 'high',
          category: 'structural',
          offline: true
        }
      ]),
      { 
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
  
  if (url.pathname.includes('/emergency-contacts')) {
    return new Response(
      JSON.stringify([
        {
          id: 1,
          name: 'Emergency Services (Offline)',
          phoneNumber: '911',
          type: 'general',
          country: 'US',
          isActive: true,
          offline: true
        }
      ]),
      { 
        status: 200,
        headers: { 'Content-Type': 'application/json' }
      }
    );
  }
  
  // Default offline API response
  return new Response(
    JSON.stringify({ 
      error: 'Service unavailable offline',
      offline: true 
    }),
    { 
      status: 503,
      headers: { 'Content-Type': 'application/json' }
    }
  );
}

function createOfflinePageResponse() {
  const offlineHTML = `
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>AidVoice - Offline</title>
        <style>
          body {
            font-family: system-ui, -apple-system, sans-serif;
            margin: 0;
            padding: 20px;
            background: #f5f5f5;
            color: #333;
            text-align: center;
          }
          .container {
            max-width: 600px;
            margin: 50px auto;
            background: white;
            padding: 40px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          }
          .shield {
            width: 64px;
            height: 64px;
            background: #1976D2;
            margin: 0 auto 20px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 32px;
          }
          h1 { color: #1976D2; margin-bottom: 10px; }
          .offline-badge {
            background: #ff9800;
            color: white;
            padding: 4px 12px;
            border-radius: 16px;
            font-size: 14px;
            margin-bottom: 20px;
            display: inline-block;
          }
          .emergency-button {
            background: #d32f2f;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-size: 16px;
            cursor: pointer;
            margin: 10px;
            text-decoration: none;
            display: inline-block;
          }
          .emergency-button:hover {
            background: #b71c1c;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="shield">üõ°Ô∏è</div>
          <h1>AidVoice</h1>
          <div class="offline-badge">Offline Mode</div>
          <p>You're currently offline, but AidVoice can still help in emergencies.</p>
          
          <h3>Available Offline:</h3>
          <ul style="text-align: left; max-width: 300px; margin: 0 auto;">
            <li>Basic emergency protocols</li>
            <li>Emergency contact numbers</li>
            <li>Voice assistance (limited)</li>
            <li>Cached translations</li>
          </ul>
          
          <div style="margin-top: 30px;">
            <a href="tel:911" class="emergency-button">üìû Call 911</a>
            <button onclick="window.location.reload()" class="emergency-button">üîÑ Retry</button>
          </div>
          
          <p style="margin-top: 30px; font-size: 14px; color: #666;">
            Connect to the internet for full functionality
          </p>
        </div>
      </body>
    </html>
  `;
  
  return new Response(offlineHTML, {
    status: 200,
    headers: { 'Content-Type': 'text/html' }
  });
}

// Store failed requests for background sync
async function storeFailedRequest(request) {
  try {
    const requestData = {
      url: request.url,
      method: request.method,
      headers: Object.fromEntries(request.headers),
      body: await request.text(),
      timestamp: Date.now()
    };
    
    // Store in IndexedDB for later sync
    const db = await openDB();
    const transaction = db.transaction(['failed_requests'], 'readwrite');
    const store = transaction.objectStore('failed_requests');
    await store.add(requestData);
  } catch (error) {
    console.error('Failed to store failed request:', error);
  }
}

// Simple IndexedDB helper for failed requests
async function openDB() {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open('aidvoice-sw', 1);
    
    request.onerror = () => reject(request.error);
    request.onsuccess = () => resolve(request.result);
    
    request.onupgradeneeded = (event) => {
      const db = event.target.result;
      if (!db.objectStoreNames.contains('failed_requests')) {
        const store = db.createObjectStore('failed_requests', { 
          keyPath: 'id', 
          autoIncrement: true 
        });
        store.createIndex('timestamp', 'timestamp');
      }
    };
  });
}

// Background sync (when browser supports it)
if ('sync' in self.registration) {
  self.addEventListener('sync', (event) => {
    if (event.tag === 'retry-failed-requests') {
      event.waitUntil(retryFailedRequests());
    }
  });
}

async function retryFailedRequests() {
  try {
    const db = await openDB();
    const transaction = db.transaction(['failed_requests'], 'readwrite');
    const store = transaction.objectStore('failed_requests');
    const requests = await store.getAll();
    
    for (const req of requests) {
      try {
        const response = await fetch(req.url, {
          method: req.method,
          headers: req.headers,
          body: req.body
        });
        
        if (response.ok) {
          // Request succeeded, remove from failed requests
          await store.delete(req.id);
        }
      } catch (error) {
        console.log('Retry failed for:', req.url);
      }
    }
  } catch (error) {
    console.error('Failed to retry requests:', error);
  }
}

// Listen for online/offline events
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  if (event.data && event.data.type === 'ONLINE') {
    // Trigger background sync when online
    if ('sync' in self.registration) {
      self.registration.sync.register('retry-failed-requests');
    } else {
      retryFailedRequests();
    }
  }
});

console.log('AidVoice Service Worker loaded');
